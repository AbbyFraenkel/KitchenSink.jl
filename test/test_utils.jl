using LinearAlgebra, SparseArrays
import FastGaussQuadrature: gausslegendre

# Test functions with known derivatives (univariate)
test_f(x) = sin.(x)
test_df(x) = cos.(x)
test_d2f(x) = -sin.(x)
test_d3f(x) = -cos.(x)

test_g(x) = x .^ 9 + 2x .^ 7 - 3x .^ 5 + 4x .^ 3 - 5x
test_dg(x) = 9x .^ 8 + 14x .^ 6 .- 15x .^ 4 + 12x .^ 2 .- 5
test_d2g(x) = 72x .^ 7 + 84x .^ 5 - 60x .^ 3 + 24x
test_d3g(x) = 504x .^ 6 + 420x .^ 4 - 180x .^ 2 + 24

# Test functions with known derivatives (multivariate)
test_h(x, y) = sin.(π * x) .* cos.(π * y)

# First partial derivatives
test_dhx(x, y) = π * cos.(π * x) .* cos.(π * y)
test_dhy(x, y) = -π * sin.(π * x) .* sin.(π * y)

# Second partial derivatives
test_d2hx(x, y) = -π^2 * sin.(π * x) .* cos.(π * y)
test_d2hy(x, y) = -π^2 * sin.(π * x) .* cos.(π * y)
test_d2hxy(x, y) = -π^2 * cos.(π * x) .* sin.(π * y)

# Third partial derivatives
test_d3hx(x, y) = -π^3 * cos.(π * x) .* cos.(π * y)
test_d3hy(x, y) = π^3 * sin.(π * x) .* sin.(π * y)
test_d3hxy(x, y) = π^3 * sin.(π * x) .* sin.(π * y)
test_d3hxyz(x, y) = π^3 * cos.(π * x) .* cos.(π * y)

# Test polynomial degrees
p_test = (3, 5, 8, 13, 21)

# Helper function to generate expected values

# Generate 2D grid for multivariate tests
function generate_2d_grid(nx::Int, ny::Int)
	x = range(-1, 1; length = nx)
	y = range(-1, 1; length = ny)
	return [([x[i], y[j]] for i in 1:nx) for j in 1:ny]
end

# Generate 3D grid for multivariate tests
function generate_3d_grid(nx::Int, ny::Int, nz::Int)
	x = range(-1, 1; length = nx)
	y = range(-1, 1; length = ny)
	z = range(-1, 1; length = nz)
	return [[([x[i], y[j], z[k]] for i in 1:nx) for j in 1:ny] for k in 1:nz]
end

# Test function for 3D case
test_k(x, y, z) = sin.(π * x) .* cos.(π * y) .* exp.(z)

# Analytical integral for test_k
function analytical_integral_k(a::Real, b::Real, c::Real, d::Real, e::Real, f::Real)
	return (cos(π * a) - cos(π * b)) * (sin(π * d) - sin(π * c)) * (exp(f) - exp(e)) / (π^2)
end
# Test function for higher dimensions
function test_multidim(x...)
	return prod(sin.(π .* x))
end

# Analytical integral for test_h
function analytical_integral_h(a::Real, b::Real, c::Real, d::Real)
	return (cos(π * a) - cos(π * b)) * (sin(π * d) - sin(π * c)) / π^2
end

# Analytical integral for test_multidim
function analytical_integral_multidim(limits...)
	return prod((cos(π * a) - cos(π * b)) / π for (a, b) in limits)
end

# Test polynomial degrees
# p_test = (3,5, 8, 13, 21, 34)

# Helper function to generate expected values
function expected_values(p::Int)
	nodes, weights = gausslegendre(p)
	nodes_with_boundary = vcat(-1.0, nodes, 1.0)
	weights_with_boundary = vcat(0.0, weights, 0.0)
	return nodes_with_boundary, weights_with_boundary, nodes, weights
end

# Generate n-dimensional grid
function generate_nd_grid(n::Int, points_per_dim::Int)
	ranges = [range(-1, 1; length = points_per_dim) for _ in 1:n]
	return Iterators.product(ranges...)
end

# Dimensions for testing
test_dimensions = (1, 2, 3, 5, 7)

p1 = 3
p2 = 8
p3 = 23
x_with_boundary1 = [-1.0, -0.7745966692414834, 0.0, 0.7745966692414834, 1.0]
w_with_boundary1 = [0.0, 5 / 9, 8 / 9, 5 / 9, 0.0]
x1 = [-0.7745966692414834, 0.0, 0.7745966692414834]
w1 = [5 / 9, 8 / 9, 5 / 9]
quad1 = diagm(0 => w1)
x_with_boundary2 = [
	-1.0,
	-0.9602898564975363,
	-0.7966664774136267,
	-0.525532409916329,
	-0.1834346424956498,
	0.1834346424956498,
	0.525532409916329,
	0.7966664774136267,
	0.9602898564975363,
	1.0,
]

x2 = [
	-0.9602898564975363,
	-0.7966664774136267,
	-0.525532409916329,
	-0.1834346424956498,
	0.1834346424956498,
	0.525532409916329,
	0.7966664774136267,
	0.9602898564975363,
]

w_with_boundary2 = [
	0.0,
	0.10122853629037676,
	0.22238103445337445,
	0.31370664587788744,
	0.36268378337836193,
	0.36268378337836193,
	0.31370664587788744,
	0.22238103445337445,
	0.10122853629037676,
	0.0,
]

w2 = [
	0.10122853629037676,
	0.22238103445337445,
	0.31370664587788744,
	0.36268378337836193,
	0.36268378337836193,
	031370664587788744,
	0.22238103445337445,
	0.10122853629037676,
]

D_1 = [                     -0.0 0.645497 -0.645497
	-0.645497 0.645497 2.58199
	0.645497 -2.58199 1.93649]

D_with_boundary_1 = [                                                                                                                       -0.0 2.6619 -0.75 0.338105 -0.5
	-2.6619 2.6619 1.61374 -0.645497 0.939181
	0.75 -1.61374 0.863743 1.0328 -1.33333
	-0.338105 0.645497 -1.0328 0.725403 7.39415
	0.5 -0.939181 1.33333 -7.39415 6.5]

D_2 = [                     -12.3362 19.6236 -12.3471 8.58478 -5.83107 3.61282 -1.82753 0.520676
	-1.9034 -2.18072 6.16602 -3.38704 2.11921 -1.26442 0.627615 -0.177261
	0.428489 -2.20611 -0.726058 3.63166 -1.75239 0.951416 -0.452392 0.125378
	-0.193015 0.78511 -2.35285 -0.189822 2.72577 -1.13532 0.49123 -0.131102
	0.131102 -0.49123 1.13532 -2.72577 0.189822 2.35285 -0.78511 0.193015
	-0.125378 0.452392 -0.951416 1.75239 -3.63166 0.726058 2.20611 -0.428489
	0.177261 -0.627615 1.26442 -2.11921 3.38704 -6.16602 2.18072 1.9034
	-0.520676 1.82753 -3.61282 5.83107 -8.58478 12.3471 -19.6236 12.3362]

D_with_boundary_2 = [
	-36.5 40.612 -5.42646 1.96226 -1.06101 0.732095 -0.610297 0.614127 -0.822688 0.5
	-15.615 12.3362 4.18143 -1.32788 0.691538 -0.469715 0.388544 -0.389412 0.520676 -0.316318
	4.45723 -8.93274 2.18072 3.1121 -1.28045 0.801152 -0.638176 0.627615 -0.831896 0.504437
	-2.26376 3.98424 -4.37098 0.726058 2.72018 -1.31257 0.951416 -0.896326 1.1658 -0.70407
	1.41351 -2.3961 2.07678 -3.14124 0.189822 2.72577 -1.51574 1.2994 -1.62751 0.975314
	-0.975314 1.62751 -1.2994 1.51574 -2.72577 -0.189822 3.14124 -2.07678 2.3961 -1.41351
	0.70407 -1.1658 0.896326 -0.951416 1.31257 -2.72018 -0.726058 4.37098 -3.98424 2.26376
	-0.504437 0.831896 -0.627615 0.638176 -0.801152 1.28045 -3.1121 -2.18072 8.93274 -4.45723
	0.316318 -0.520676 0.389412 -0.388544 0.469715 -0.691538 1.32788 -4.18143 -12.3362 15.615
	-0.5 0.822688 -0.614127 0.610297 -0.732095 1.06101 -1.96226 5.42646 -40.612 36.5]
quad2 = diagm(0 => w2)
x_with_boundary3 = [-1.0
	-0.9947693349975522
	-0.9725424712181152
	-0.9329710868260161
	-0.8767523582704416
	-0.8048884016188399
	-0.7186613631319502
	-0.6196098757636461
	-0.5095014778460075
	-0.3903010380302908
	-0.26413568097034495
	-0.1332568242984661
	0.0
	0.1332568242984661
	0.26413568097034495
	0.3903010380302908
	0.5095014778460075
	0.6196098757636461
	0.7186613631319502
	0.8048884016188399
	0.8767523582704416
	0.9329710868260161
	0.9725424712181152
	0.9947693349975522
	1.0]

x3 = [-0.9947693349975522
	-0.9725424712181152
	-0.9329710868260161
	-0.8767523582704416
	-0.8048884016188399
	-0.7186613631319502
	-0.6196098757636461
	-0.5095014778460075
	-0.3903010380302908
	-0.26413568097034495
	-0.1332568242984661
	0.0
	0.1332568242984661
	0.26413568097034495
	0.3903010380302908
	0.5095014778460075
	0.6196098757636461
	0.7186613631319502
	0.8048884016188399
	0.8767523582704416
	0.9329710868260161
	0.9725424712181152
	0.9947693349975522]

w_with_boundary3 = [0.0
	0.013411859487141724
	0.030988005856979448
	0.04803767173108463
	0.06423242140852582
	0.07928141177671894
	0.09291576606003518
	0.10489209146454143
	0.11499664022241136
	0.12304908430672962
	0.1289057221880822
	0.13246203940469664
	0.13365457218610619
	0.13246203940469664
	0.1289057221880822
	0.12304908430672962
	0.11499664022241136
	0.10489209146454143
	0.09291576606003518
	0.07928141177671894
	0.06423242140852582
	0.04803767173108463
	0.030988005856979448
	0.013411859487141724
	0.0]

w3 = [0.013411859487141724
	0.030988005856979448
	0.04803767173108463
	0.06423242140852582
	0.07928141177671894
	0.09291576606003518
	0.10489209146454143
	0.11499664022241136
	0.12304908430672962
	0.1289057221880822
	0.13246203940469664
	0.13365457218610619
	0.13246203940469664
	0.1289057221880822
	0.12304908430672962
	0.11499664022241136
	0.10489209146454143
	0.09291576606003518
	0.07928141177671894
	0.06423242140852582
	0.04803767173108463
	0.030988005856979448
	0.013411859487141724]

D_with_boundary_3 = [
	-276.5000000000014 306.53339392533104 -38.9588796986356 12.846949807887823 -6.046732170356874 3.4391480997475488 -2.2035376661400963 1.534042219914372 -1.136277083182803 0.8837442151090857 -0.7154143274537963 0.5991849528978805 -0.517019481617675 0.45827164484870947 -0.4164488708140469 0.3875548646371691 -0.3692227124241819 0.36029325293037223 -0.3607111305216808 0.37177793497338907 -0.3970931363866968 0.4454888586240655 -0.5423024225048435 0.8037889231382003 -0.4999999999999999
	-119.23627312119572 95.33948447589852 30.01615222309326 -8.690631606263546 3.9384031078560273 -2.2040320564010103 1.4003487602463573 -0.9700987481056683 0.7163177698626011 -0.5559475379977767 0.4493875182628544 -0.3759716000380211 0.3241528306925945 -0.2871424872827872 0.26081208699463976 -0.24262497273840872 0.23107939491540733 -0.22543756715698113 0.22565689789392868 -0.2325462534075349 0.24835321417525652 -0.27859861353284565 0.3391251577597656 -0.502629084360778 0.31266021082989837
	34.04635672060008 -67.43550359525337 17.9564617935629 20.34290886688488 -7.272952615661316 3.7415534847153205 -2.2827143287390648 1.545634732429542 -1.1252126409590746 0.8651093881608829 -0.6947119283734638 0.5784603900456832 -0.4969702876750929 0.43904305658838605 -0.3979520835352205 0.36959674871608783 -0.3515547425928594 0.3426210304403622 -0.3426778200554155 0.35291761717554826 -0.37672573426809913 0.42245675084632406 -0.5141163648860982 0.7618923180218596 -0.4739207561887897
	-17.3250947044317 30.129805709624787 -31.392395562905783 7.200798353019062 15.394164616722872 -6.083889760394055 3.359276687029397 -2.162514875538587 1.5284016506154317 -1.1530389602977564 0.9140583459966454 -0.7541440048332647 0.6435414398579339 -0.5656386503976968 0.510693449629237 -0.4728579232454568 0.4486959857691839 -0.43646566373509005 0.4358873299126023 -0.44839122046226376 0.478216914453051 -0.5359222885470211 0.6519190307329213 -0.965881707684587 0.6007758091101364
	10.887346154193768 -18.230176126782222 14.984693741547854 -20.553312947444542 3.790455081127149 12.529204260136959 -5.261909488803933 3.0450425278718143 -2.0363843681030653 1.486289132844669 -1.1531006377788289 0.9372892037043206 -0.79128077536691 0.6899643577713392 -0.6191744123978844 0.5706210275287199 -0.539485578026262 0.5232755660003439 -0.5214073918597537 0.5354283823905573 -0.5702864614887879 0.6384849158256738 -0.7761799163122838 1.1495834001949243 -0.7149796467736199
	-7.638057937200326 12.584019351520045 -9.508671469622996 10.019310052314967 -15.454475169616577 2.2856105310989774 10.714512656359826 -4.693615333536201 2.8118795939011365 -1.936832276198032 1.4508506227229356 -1.1523549133259274 0.9572762267356588 -0.8249873545038933 0.7338949928909 -0.6718484622302903 0.6319224426775354 -0.6104788919273794 0.6064000773478686 -0.6212041309010911 0.6604381626285654 -0.7384372234674339 0.8968942155372656 -1.3277332081015198 0.8256874448959869
	5.733512500089203 -9.367115968113522 6.7965366750436536 -6.481424571947419 7.604004410962234 -12.552800805027507 1.4862935877231165 9.502889665215106 -4.298270058947575 2.6469242037628296 -1.868302065196644 1.431018956157648 -1.1604668894788572 0.9833397202355965 -0.8640555807156575 0.7837460414853669 -0.7320085272581633 0.7033517035105866 -0.6957379729181259 0.7104400940329082 -0.7534877055650578 0.8410057026872606 -1.0202863943195013 1.5094484971053328 -0.9385552185228112
	-4.505097777384696 7.324066071741383 -5.1940914501672655 4.70923564337571 -4.966597582485317 6.206436733581833 -10.725617635888492 1.005723693824754 8.67431045773434 -4.026750311078361 2.537936512356372 -1.8299243612572966 1.429953881910293 -1.1821339647171696 1.0208491927252261 -0.9143078078114633 0.8458992326026509 -0.8069593780824889 0.7938513127243179 -0.8072452364944526 0.8534853412662583 -0.9504765419285307 1.1513748543036884 -1.702011924182501 1.0580910433312087
	3.6579717386191772 -5.928314341992818 4.1450189006650415 -3.6485307105399936 3.640948652088647 -4.075873981608411 5.318014430564686 -9.508765801012405 0.6881358789894296 8.110399195184016 -3.849633669549335 2.4766180921458383 -1.8207046813645846 1.4497118324883793 -1.2209450156886494 1.0744170349484519 -0.9813514224018024 0.9272734395738487 -0.9056741102508742 0.9159838309187416 -0.9645719732005771 1.0711065923775276 -1.295045042707476 1.912435163068477 -1.1886240313153347
	-3.043984977382747 4.922878675300283 -3.4097517462967963 2.9449933124269965 -2.8432688348545456 3.003833555686237 -3.5039438723701912 4.722845220882223 -8.677648481971936 0.46044250041987733 7.7441403961492234 -3.749742609983616 2.4584714089309174 -1.8409610670209562 1.4929514341654295 -1.281062439708899 1.149562817803283 -1.072362060457947 1.0375069054312487 -1.0419699113777046 1.091597151746548 -1.207733189975105 1.456732728377161 -2.1484280849427924 1.3349011690238082
	2.5813498968809077 -4.168498496190444 2.868334611104672 -2.445612082661305 2.310761679138824 -2.3571101241575345 2.5908129045787343 -3.118193686621088 4.314719315645628 -8.112347389840524 0.2839459230062733 7.537484958219315 -3.718129031375317 2.482425814361861 -1.8929665169172505 1.5639360923948333 -1.3684509994297154 1.254249462998803 -1.1982036473078455 1.1923152464621503 -1.240797600830709 1.3663876889471873 -1.6430691458512923 2.419281240004374 -1.5026261125605387
	-2.2215609842326614 3.5836186016761666 -2.454182086410221 2.0733662937820796 -1.9300548757183287 1.9237628279798622 -2.039118395653075 2.3102744282528236 -2.852333378815338 4.036294797191239 -7.745234238673961 0.13566589532050743 7.470782954396402 -3.752153052065158 2.5508468035345615 -1.9816457686627147 1.669640330329403 -1.4924408501664852 1.401201643123347 -1.3772493073053356 1.4207664694370365 -1.5551089774349678 1.8626886528166826 -2.7369332115885787 1.6991054288867147
	1.9341630935669052 -3.1174923989473102 2.1274160101619484 -1.7852009618829245 1.6440518121097925 -1.6124690511305917 1.6684709623299998 -1.8215508796839046 2.115775554612739 -2.6701485621857497 3.8549735137560575 -7.537979680074565 8.881784197001252e-16 7.537979680074566 -3.854973513756057 2.67014856218575 -2.1157755546127386 1.8215508796839046 -1.6684709623300003 1.6124690511305908 -1.6440518121097933 1.7852009618829245 -2.1274160101619493 3.117492398947309 -1.9341630935669047
	-1.699105428886715 2.7369332115885787 -1.8626886528166815 1.5551089774349676 -1.4207664694370357 1.377249307305336 -1.401201643123346 1.4924408501664848 -1.6696403303294027 1.9816457686627138 -2.550846803534561 3.7521530520651565 -7.4707829543964 -0.13566589532051143 7.745234238673959 -4.036294797191239 2.852333378815337 -2.3102744282528227 2.0391183956530754 -1.9237628279798609 1.9300548757183291 -2.073366293782079 2.454182086410222 -3.583618601676164 2.22156098423266
	1.5026261125605394 -2.4192812400043757 1.6430691458512916 -1.3663876889471875 1.2407976008307082 -1.192315246462151 1.1982036473078452 -1.2542494629988032 1.3684509994297158 -1.5639360923948329 1.8929665169172507 -2.4824258143618607 3.718129031375317 -7.537484958219316 -0.28394592300626575 8.112347389840526 -4.314719315645628 3.1181936866210886 -2.5908129045787356 2.357110124157533 -2.310761679138826 2.4456120826613055 -2.8683346111046735 4.168498496190442 -2.581349896880907
	-1.3349011690238082 2.148428084942793 -1.4567327283771598 1.207733189975105 -1.0915971517465473 1.041969911377705 -1.0375069054312482 1.0723620604579467 -1.149562817803283 1.2810624397088983 -1.4929514341654295 1.840961067020955 -2.4584714089309165 3.749742609983616 -7.744140396149221 -0.4604425004198873 8.677648481971932 -4.722845220882222 3.503943872370192 -3.003833555686234 2.843268834854546 -2.944993312426996 3.4097517462967972 -4.92287867530028 3.0439849773827463
	1.1886240313153351 -1.9124351630684782 1.295045042707476 -1.0711065923775278 0.964571973200577 -0.9159838309187422 0.905674110250874 -0.9272734395738488 0.9813514224018027 -1.0744170349484519 1.2209450156886499 -1.4497118324883793 1.820704681364585 -2.4766180921458396 3.8496336695493354 -8.11039919518402 -0.6881358789894172 9.508765801012407 -5.318014430564689 4.07587398160841 -3.6409486520886496 3.648530710539994 -4.145018900665044 5.9283143419928175 -3.6579717386191772
	-1.058091043331209 1.7020119241825016 -1.151374854303688 0.9504765419285307 -0.853485341266258 0.807245236494453 -0.7938513127243176 0.8069593780824889 -0.8458992326026511 0.9143078078114631 -1.0208491927252263 1.1821339647171694 -1.429953881910293 1.8299243612572968 -2.537936512356372 4.026750311078362 -8.674310457734338 -1.0057236938247742 10.725617635888497 -6.206436733581829 4.96659758248532 -4.70923564337571 5.194091450167267 -7.324066071741379 4.505097777384695
	0.9385552185228111 -1.5094484971053328 1.0202863943195004 -0.8410057026872603 0.7534877055650571 -0.7104400940329083 0.6957379729181253 -0.7033517035105865 0.7320085272581632 -0.7837460414853664 0.8640555807156572 -0.9833397202355958 1.1604668894788566 -1.4310189561576476 1.868302065196643 -2.646924203762829 4.298270058947573 -9.502889665215102 -1.4862935877230967 12.552800805027495 -7.604004410962234 6.481424571947416 -6.7965366750436536 9.367115968113515 -5.7335125000891995
	-0.8256874448959874 1.3277332081015212 -0.8968942155372656 0.7384372234674343 -0.6604381626285654 0.6212041309010916 -0.6064000773478687 0.6104788919273797 -0.631922442677536 0.6718484622302905 -0.7338949928909004 0.8249873545038935 -0.9572762267356592 1.1523549133259283 -1.4508506227229363 1.9368322761980334 -2.811879593901138 4.6936153335362025 -10.714512656359837 -2.28561053109899 15.454475169616593 -10.019310052314973 9.508671469623005 -12.584019351520046 7.638057937200329
	0.7149796467736197 -1.1495834001949243 0.776179916312283 -0.6384849158256735 0.5702864614887875 -0.5354283823905575 0.5214073918597534 -0.5232755660003436 0.5394855780262617 -0.5706210275287195 0.6191744123978842 -0.6899643577713387 0.7912807753669098 -0.9372892037043203 1.153100637778828 -1.4862891328446686 2.036384368103064 -3.045042527871813 5.261909488803933 -12.529204260136947 -3.7904550811271456 20.553312947444535 -14.984693741547854 18.230176126782208 -10.88734615419376
	-0.6007758091101365 0.9658817076845875 -0.6519190307329211 0.5359222885470211 -0.47821691445305076 0.448391220462264 -0.43588732991260215 0.43646566373509005 -0.44869598576918396 0.47285792324545667 -0.510693449629237 0.5656386503976967 -0.6435414398579339 0.7541440048332649 -0.9140583459966453 1.1530389602977567 -1.5284016506154314 2.162514875538587 -3.359276687029398 6.083889760394052 -15.394164616722879 -7.200798353019078 31.392395562905797 -30.129805709624772 17.325094704431695
	0.4739207561887896 -0.7618923180218596 0.5141163648860978 -0.42245675084632384 0.3767257342680988 -0.35291761717554826 0.34267782005541525 -0.342621030440362 0.35155474259285935 -0.36959674871608766 0.39795208353522044 -0.43904305658838577 0.49697028767509266 -0.5784603900456831 0.6947119283734634 -0.8651093881608828 1.125212640959074 -1.5456347324295412 2.2827143287390648 -3.7415534847153165 7.272952615661316 -20.342908866884873 -17.95646179356288 67.43550359525331 -34.04635672060006
	-0.31266021082989853 0.5026290843607785 -0.3391251577597656 0.2785986135328458 -0.24835321417525652 0.23254625340753513 -0.22565689789392868 0.2254375671569812 -0.23107939491540747 0.24262497273840877 -0.2608120869946399 0.28714248728278724 -0.32415283069259465 0.37597160003802127 -0.44938751826285456 0.5559475379977771 -0.7163177698626012 0.9700987481056689 -1.4003487602463585 2.2040320564010103 -3.938403107856031 8.69063160626355 -30.016152223093286 -95.33948447589849 119.23627312119575
	0.5000000000000001 -0.8037889231382008 0.5423024225048434 -0.4454888586240656 0.39709313638669674 -0.3717779349733894 0.36071113052168075 -0.36029325293037234 0.36922271242418203 -0.3875548646371691 0.416448870814047 -0.4582716448487094 0.5170194816176751 -0.5991849528978808 0.7154143274537964 -0.8837442151090861 1.136277083182803 -1.5340422199143724 2.2035376661400976 -3.4391480997475474 6.046732170356878 -12.846949807887826 38.95887969863563 -306.5333939253309 276.5000000000012
]

D_3 = [
	-95.33948447589702 155.8092509380595 -107.91685652447632 87.30842702682303 -74.38780737082405 64.89426442208709 -57.28039493896924 50.830851021449 -45.16567696892273 40.06478815309146 -35.3935581327653 31.067065180201787 -27.03128192396019 23.25249498161158 -19.711070549502946 16.397697769419675 -13.311173636754047 10.457279512298268 -7.848618105643003 5.505614301757247 -3.45952837108792 1.7603467763648997 -0.5026290843607782
	-12.991233376513447 -17.956461793563196 48.664557502127124 -31.060506685299234 24.327505994159647 -20.37902711879641 17.581612640086316 -15.38218526983773 13.539652471718995 -11.931866355906322 10.490702942834007 -9.17577200715635 7.962291567481184 -6.834935291688441 5.784484136660943 -4.8059184426192045 3.8973181134982466 -3.0592704921499703 2.2946632949003374 -1.6088778252949718 1.0106062499837014 -0.5141163648860982 0.14677611026087858
	2.4263775857041967 -13.122746303025155 -7.200798353018924 27.482369794522892 -16.535877309436525 12.536546996575932 -10.28279593978338 8.734161301762033 -7.543636427930662 6.562628461099191 -5.717228121395684 4.966940782691855 -4.288153426767613 3.6666055094978125 -3.0936233534632005 2.564105523952517 -2.0754018414750823 1.6266960139843691 -1.2187173831552565 0.8537348022586148 -0.5359222885470208 0.27251720988540923 -0.0777832339363187
	-0.822346533541648 3.508731156470646 -11.512874810200689 -3.7904550811272255 19.075298468396518 -10.999614828075936 8.110496171026682 -6.518466111522579 5.446807373826893 -4.637383995839819 3.98021745707836 -3.4209366046125913 2.92994752389111 -2.490111805174644 2.0911562573666007 -1.7268932688258465 1.3937488345700597 -1.0899618268182363 0.8151719766470616 -0.5702864614887879 0.3576453549312813 -0.18174590034099505 0.05185665336378627
	0.372851183942802 -1.4624270519436786 3.6863104807088938 -10.150943454653989 -2.285610531098968 14.711558193274456 -8.211333715413526 5.912001355058462 -4.662113856877085 3.8324870360165795 -3.214190335596277 2.7183403569950277 -2.301084805706527 1.9386165618987887 -1.617194252686617 1.328622443686611 -1.0680137914188357 0.8326174332356588 -0.6212041309010914 0.43379476627703994 -0.2716862600319102 0.13794170591798835 -0.039339330683803256
	-0.2021323355745922 0.7612999169922593 -1.7367540255884826 3.637544003888362 -9.142277203492817 -1.4862935877231043 12.10809008828926 -6.581808643477151 4.640300599563996 -3.5943373517809545 2.906996226036789 -2.4000100535260334 1.9975730183982536 -1.662315374818251 1.3739786054471859 -1.120902127072589 0.8961743311648909 -0.6957379729181258 0.5174176167539466 -0.36044754017113206 0.2253547848117763 -0.11428525798380672 0.032572282780321545
	0.12404012463269112 -0.45662296816217646 0.9903718979597913 -1.8646825716432947 3.5476120724068014 -8.417872698495458 -1.0057236938247835 10.424771825126985 -5.540377464476683 3.832062107676535 -2.917509395399356 2.321038699296777 -1.884715577158275 1.5413929741932055 -1.2579896896157785 1.016600285394434 -0.8069593780824887 0.6230447065059154 -0.4614230466388506 0.3204365190819094 -0.19988918119231125 0.10121966632345548 -0.028825213909044953
	-0.08354290402710073 0.3032096923957927 -0.6384608856703198 1.13744104722321 -1.938576496839104 3.4729454224715006 -7.912114337990687 -0.688135878989421 9.285286053376652 -4.836593559137505 3.2855385660765988 -2.459055117146599 1.9232210854162128 -1.533967983928213 1.2300589983340273 -0.9813514224018025 0.7715715824769861 -0.5914532193386202 0.4356623227597908 -0.3013345861634277 0.18743426268583083 -0.09473303221247763 0.026950390628674947
	0.06059606460184598 -0.2178643988965557 0.45013993708285877 -0.7758525831676566 1.2479149934096494 -1.9987226356142886 3.432567290640145 -7.579647289237917 -0.46044250041990403 8.498462258534706 -4.345061513353141 2.9002862212503677 -2.133236841002599 1.6383731141275766 -1.2810624397088985 1.0041062061771053 -0.7793935139301092 0.5918155689773802 -0.43287680591640043 0.29786788346531495 -0.18460107866942754 0.0930772161244623 -0.0264451544745154
	-0.046756048900783206 0.16700373683908204 -0.34063060989626487 0.5745784192898854 -0.8923225726067924 1.346679687081734 -2.0651485773212284 3.434253581383486 -7.3922970083403765 -0.2839459230062394 7.958913735612941 -3.996989637264305 2.6212208742148295 -1.8929665169172507 1.4251214280498328 -1.089203584737954 0.8306769092732903 -0.6228147582424876 0.4513704290594706 -0.30852836559488384 0.19031369493985542 -0.09566481057678494 0.02713591766094381
	0.03806734588662099 -0.13532430902713893 0.2734921061532546 -0.45450270420540456 0.6897094805946261 -1.0037911476780816 1.4490535880077007 -2.1500707749235537 3.4832801655328547 -7.335119905957144 -0.13566589532051337 7.6058428045930215 -3.7521530520651587 2.415778088702057 -1.7101395581656507 1.2585642707606397 -0.9360908567293126 0.6897656401303415 -0.49377287604021414 0.3345719391336818 -0.2051301937395271 0.1027091902719464 -0.02907334591504551
	-0.03252782262887872 0.11522327993221755 -0.23129947541337129 0.380277901343025 -0.5678384919762807 0.8067488321543766 -1.122227626919915 1.5665376632428334 -2.2633917472123115 3.5860210401970347 -7.404124901250943 -1.7208456881689926e-15 7.404124901250945 -3.5860210401970347 2.263391747212311 -1.5665376632428332 1.122227626919915 -0.8067488321543768 0.5678384919762807 -0.38027790134302514 0.2312994754133712 -0.11522327993221759 0.03252782262887871
	0.0290733459150455 -0.10270919027194632 0.20513019373952712 -0.3345719391336815 0.49377287604021386 -0.6897656401303411 0.9360908567293121 -1.2585642707606395 1.7101395581656502 -2.4157780887020555 3.7521530520651556 -7.605842804593018 0.13566589532051304 7.335119905957141 -3.4832801655328534 2.150070774923553 -1.4490535880077002 1.0037911476780816 -0.689709480594626 0.45450270420540456 -0.2734921061532544 0.13532430902713893 -0.03806734588662097
	-0.027135917660943816 0.0956648105767849 -0.19031369493985548 0.3085283655948837 -0.45137042905947056 0.6228147582424874 -0.8306769092732903 1.0892035847379542 -1.425121428049833 1.8929665169172507 -2.6212208742148286 3.996989637264305 -7.958913735612944 0.28394592300624255 7.392297008340376 -3.4342535813834854 2.0651485773212284 -1.3466796870817344 0.8923225726067925 -0.5745784192898856 0.34063060989626476 -0.1670037368390821 0.04675604890078319
	0.02644515447451541 -0.09307721612446229 0.1846010786694276 -0.2978678834653149 0.43287680591640043 -0.5918155689773802 0.7793935139301094 -1.0041062061771056 1.281062439708899 -1.6383731141275766 2.1332368410025984 -2.9002862212503686 4.3450615133531425 -8.498462258534706 0.460442500419903 7.579647289237917 -3.4325672906401454 1.9987226356142893 -1.2479149934096496 0.7758525831676569 -0.4501399370828587 0.21786439889655584 -0.06059606460184597
	-0.026950390628674954 0.09473303221247761 -0.18743426268583094 0.3013345861634276 -0.43566232275979083 0.59145321933862 -0.7715715824769863 0.9813514224018027 -1.2300589983340278 1.5339679839282132 -1.9232210854162124 2.459055117146599 -3.2855385660766006 4.836593559137506 -9.285286053376652 0.6881358789894219 7.912114337990688 -3.4729454224715015 1.9385764968391044 -1.1374410472232106 0.6384608856703197 -0.3032096923957929 0.08354290402710073
	0.02882521390904496 -0.10121966632345544 0.19988918119231133 -0.3204365190819093 0.46142304663885053 -0.6230447065059153 0.8069593780824887 -1.0166002853944343 1.2579896896157785 -1.5413929741932055 1.8847155771582744 -2.321038699296777 2.9175093953993567 -3.832062107676535 5.540377464476682 -10.424771825126983 1.0057236938247798 8.41787269849546 -3.547612072406802 1.8646825716432953 -0.9903718979597909 0.4566229681621766 -0.1240401246326911
	-0.032572282780321545 0.11428525798380665 -0.22535478481177632 0.3604475401711319 -0.5174176167539464 0.6957379729181254 -0.8961743311648908 1.120902127072589 -1.3739786054471856 1.6623153748182509 -1.9975730183982525 2.4000100535260325 -2.9069962260367896 3.5943373517809536 -4.640300599563995 6.581808643477149 -12.108090088289257 1.4862935877231094 9.142277203492815 -3.637544003888362 1.7367540255884815 -0.7612999169922595 0.20213233557459212
	0.039339330683803256 -0.13794170591798827 0.2716862600319103 -0.4337947662770397 0.6212041309010913 -0.8326174332356585 1.0680137914188357 -1.328622443686611 1.6171942526866172 -1.9386165618987885 2.301084805706526 -2.7183403569950273 3.2141903355962778 -3.832487036016579 4.662113856877083 -5.912001355058461 8.211333715413526 -14.711558193274458 2.2856105310989654 10.15094345465399 -3.686310480708892 1.4624270519436788 -0.3728511839428018
	-0.05185665336378626 0.18174590034099491 -0.35764535493128136 0.5702864614887875 -0.8151719766470612 1.0899618268182358 -1.3937488345700593 1.726893268825846 -2.0911562573666003 2.4901118051746436 -2.9299475238911077 3.42093660461259 -3.98021745707836 4.6373839958398175 -5.44680737382689 6.518466111522575 -8.11049617102668 10.999614828075934 -19.075298468396515 3.7904550811272357 11.51287481020068 -3.5087311564706463 0.8223465335416474
	0.07778323393631874 -0.27251720988540923 0.5359222885470213 -0.8537348022586148 1.218717383155257 -1.6266960139843691 2.0754018414750828 -2.5641055239525183 3.0936233534632023 -3.666605509497814 4.288153426767613 -4.966940782691856 5.717228121395689 -6.562628461099194 7.5436364279306645 -8.734161301762034 10.282795939783382 -12.536546996575941 16.535877309436536 -27.482369794522914 7.200798353018932 13.122746303025162 -2.426377585704197
	-0.14677611026087856 0.5141163648860978 -1.0106062499837014 1.6088778252949707 -2.294663294900336 3.0592704921499685 -3.8973181134982453 4.805918442619203 -5.784484136660942 6.8349352916884385 -7.962291567481178 9.175772007156347 -10.490702942834007 11.931866355906315 -13.539652471718988 15.382185269837722 -17.58161264008631 20.379027118796408 -24.327505994159644 31.060506685299234 -48.66455750212709 17.95646179356317 12.99123337651344
	0.5026290843607785 -1.7603467763648994 3.4595283710879223 -5.505614301757246 7.848618105643004 -10.457279512298268 13.31117363675405 -16.39769776941968 19.711070549502956 -23.252494981611584 27.03128192396019 -31.067065180201794 35.39355813276532 -40.06478815309147 45.16567696892274 -50.830851021449 57.28039493896925 -64.89426442208712 74.38780737082408 -87.30842702682308 107.9168565244763 -155.8092509380596 95.33948447589714
]

quad3 = spdiagm(0 => w3)

# Add to test_utils.jl

# Test functions for transforms
function test_transform_2d(x, y)
	return [x^2 - y^2, 2x * y]
end

function test_inverse_transform_2d(x, y)
	r = sqrt(x^2 + y^2)
	theta = atan(y, x) / 2
	return [r * cos(theta), r * sin(theta)]
end

function test_jacobian_2d(x, y)
	return [2x -2y; 2y 2x]
end

# Test level set function
function test_level_set_2d(x, y)
	return x^2 + y^2 - 1
end

# Test functions for transforms
function test_polynomial_transform(x::AbstractVector)
	return [sum(x .^ i) for i in 1:length(x)]
end

function test_polynomial_inverse_transform(y::AbstractVector)
	n = length(y)
	x = zeros(n)
	for i in 1:n
		x[i] = (y[i] - sum(x .^ i for i in 1:(i - 1)))^(1 / i)
	end
	return x
end

function test_polynomial_jacobian(x::AbstractVector)
	n = length(x)
	return [i * x[j]^(i - 1) for i in 1:n, j in 1:n]
end

# Test level set functions
function test_hypersphere_level_set(x::AbstractVector)
	return sum(x .^ 2) - 1
end

function test_hypercube_level_set(x::AbstractVector)
	return maximum(abs.(x)) - 1
end

# Generate test points
function generate_test_points(n::Int, dim::Int)
	return [rand(dim) .* 2 .- 1 for _ in 1:n]  # Points in [-1, 1]^dim
end

# Create test transforms
function create_test_affine_transform(dim::Int)
	A = diagm(0 => rand(dim) .+ 0.5)  # Ensure non-zero determinant
	b = rand(dim)
	return AffineTransform(A, b)
end

function create_test_nonlinear_transform(dim::Int)
	return NonlinearTransform(
		test_polynomial_transform,
		test_polynomial_inverse_transform,
		test_polynomial_jacobian,
	)
end

# Create test level sets
function create_test_primitive_level_set(dim::Int)
	return PrimitiveLevelSet(test_hypersphere_level_set, nothing)
end

function create_test_composite_level_set(dim::Int)
	hypersphere = PrimitiveLevelSet(test_hypersphere_level_set, nothing)
	hypercube = PrimitiveLevelSet(test_hypercube_level_set, nothing)
	return CompositeLevelSet([min], [hypersphere, hypercube])
end

# Create test domain mapping
function create_test_domain_mapping(dim::Int)
	cartesian = KSCartesianCoordinates(ntuple(i -> (-1.0, 1.0), dim))
	hyperspherical = KSSphericalCoordinates((0.0, 1.0), ntuple(i -> (0.0, π), dim - 1))
	return create_domain_mapping(hyperspherical, cartesian)
end

# Test spectral operator
function test_spectral_operator(u::AbstractVector, x::AbstractVector)
	D = SpectralMethods.derivative_matrix(length(x), 1)
	return D * u
end

# Original functions remain unchanged
function create_test_matrix(n::Int, sparse::Bool = false)
	if sparse
		return spdiagm(-1 => ones(n - 1), 0 => 2.0 .* ones(n), 1 => ones(n - 1))
	else
		return Tridiagonal(-1.0 .* ones(n - 1), 2.0 .* ones(n), -1.0 .* ones(n - 1))
	end
end
function create_test_matrix(n::Int, type::Symbol)
	if type == :spd
		return create_spd_matrix(n)
	elseif type == :diag_dominant
		return make_diag_dominant_matrix(n)
	elseif type == :ill_conditioned
		return gen_ill_conditioned(n)
	elseif type == :sparse
		return create_sparse_matrix(n)
	elseif type == :indefinite
		return create_symmetric_indefinite_matrix(n)
	elseif type == :non_diag_dominant
		return make_non_diag_dominant_matrix(n)
	elseif type == :moderately_diag_dominant
		return create_moderately_diag_dominant(n)
	elseif type == :nearly_singular
		Q = qr(randn(n, n)).Q
		Λ = Diagonal(vcat([1e-10], range(1.0, 10.0; length = n - 1)))
		return Q * Λ * Q'
	elseif type == :wide_spectrum
		Q = qr(randn(n, n)).Q
		Λ = Diagonal(exp.(range(0, 20; length = n)))
		return Q * Λ * Q'
	elseif type == :clustered
		Q = qr(randn(n, n)).Q
		Λ = Diagonal(vcat(ones(n ÷ 2), 1e4 * ones(n - n ÷ 2)))
		return Q * Λ * Q'
	elseif type == :mixed_sign
		Q = qr(randn(n, n)).Q
		Λ = Diagonal(vcat(-ones(n ÷ 2), ones(n - n ÷ 2)))
		return Q * Λ * Q'
	else
		throw(ArgumentError("Unknown matrix type: $type"))
	end
end

function make_spd(A::AbstractMatrix{T}) where T
	return A + size(A, 1) * I
end

function gen_diag_dominant(n::Int, sparse::Bool = false)
	if sparse
		return spdiagm(-1 => -ones(n - 1), 0 => 4.0 .* ones(n), 1 => -ones(n - 1))
	else
		return Tridiagonal(-ones(n - 1), 4.0 .* ones(n), -ones(n - 1))
	end
end

function gen_spd_matrix(n::Int, cond_num::Float64 = 1e3)
	Q = qr(randn(n, n)).Q
	Λ = Diagonal(range(1.0; stop = cond_num, length = n))
	A = Q * Λ * Q'
	# Force symmetry explicitly
	return (A + A') / 2
end
function gen_ill_conditioned(n::Int; cond_num::Float64 = 1e12)
	A = gen_spd_matrix(n, cond_num)
	return (A + A') / 2 + 1e-10 .* I
end

function estimate_condition_number_from_action(op::Function, n::Int; num_vectors::Int = 5)
	# Estimate highest singular value
	v = normalize(randn(n))
	σ_max = 0.0
	for _ in 1:10
		v = normalize(op(v))
		σ_max = norm(op(v))
	end

	# Estimate lowest singular value using inverse iterations
	v = normalize(randn(n))
	σ_min = Inf
	for _ in 1:10
		w = op(v)
		σ = norm(w)
		σ_min = min(σ_min, σ)
		v = normalize(w)
	end
	return σ_max / max(σ_min, eps(Float64))
end

function create_moderately_diag_dominant(n::Int)
	A = randn(n, n)
	# Calculate diagonal scaling that makes matrix moderately diagonally dominant
	row_sums = vec(sum(abs.(A); dims = 2))
	# Create diagonal matrix with 0.6 times the row sums
	D = Diagonal(0.6 .* row_sums)
	return D + A
end

function create_symmetric_indefinite_matrix(n::Int)
	A = randn(n, n)
	A_sym = (A + A') / 2
	# Ensure it's indefinite
	A_sym += diagm(0 => (-1) .^ (1:n))
	return A_sym
end

"""
	create_matrix_suite(n::Int)

Creates a suite of matrices with different properties for testing.
Returns a dictionary with matrices and their known properties.
"""
function create_matrix_suite(n::Int)
	suite = Dict{String, Tuple{AbstractMatrix, Dict{Symbol, Any}}}()

	# SPD with known condition number
	A_spd = gen_spd_matrix(n, 1e3)
	suite["spd"] = (
		A_spd, Dict(
			:symmetric => true,
			:posdef => true,
			:cond_num_approx => 1e3,
		)
	)

	# Diagonally dominant
	A_dd = gen_diag_dominant(n)
	suite["diag_dominant"] = (A_dd, Dict(
		:diag_dominantinant => true,
		:symmetric => true,
	))

	# Ill-conditioned
	A_ill = gen_ill_conditioned(n; cond_num = 1e10)
	suite["ill_conditioned"] = (
		A_ill, Dict(
			:symmetric => true,
			:ill_conditioned => true,
			:cond_num_approx => 1e10,
		)
	)

	# Sparse
	A_sparse = create_test_matrix(n, true)
	suite["sparse"] = (A_sparse, Dict(
		:sparse => true,
		:structured => true,
	))

	# Indefinite
	A_indef = create_symmetric_indefinite_matrix(n)
	suite["indefinite"] = (A_indef, Dict(
		:symmetric => true,
		:posdef => false,
	))

	return suite
end

"""
	generate_challenging_cases(n::Int)

Generates a set of challenging test cases for numerical algorithms.
"""
function generate_challenging_cases(n::Int)
	cases = Dict{String, AbstractMatrix}()

	# Nearly singular matrix
	Q = qr(randn(n, n)).Q
	Λ = Diagonal(vcat([1e-10], range(1.0, 10.0; length = n - 1)))
	cases["nearly_singular"] = Q * Λ * Q'

	# Matrix with wide range of eigenvalues
	Λ = Diagonal(exp.(range(0, 20; length = n)))
	cases["wide_spectrum"] = Q * Λ * Q'

	# Matrix with clustered eigenvalues
	Λ = Diagonal(vcat(ones(n ÷ 2), 1e4 * ones(n - n ÷ 2)))
	cases["clustered"] = Q * Λ * Q'

	# Matrix with mixed positive/negative eigenvalues
	Λ = Diagonal(vcat(-ones(n ÷ 2), ones(n - n ÷ 2)))
	cases["mixed_sign"] = Q * Λ * Q'

	return cases
end
"""
	test_matrix_algorithm_invariance(f::Function, A::AbstractMatrix{T}) where T

Tests if a matrix algorithm respects basic matrix properties.
Returns a Dict with test results.
"""
function test_matrix_algorithm_invariance(f::Function, A::AbstractMatrix{T}) where T
	results = Dict{Symbol, Bool}()

	# Test conditioning improvement
	try
		orig_cond = estimate_condition_number(A)
		result = f(copy(A))
		if result isa AbstractVector
			results[:improves_conditioning] = true  # Vector output is considered stable
		else
			new_cond = estimate_condition_number(result)
			results[:improves_conditioning] = new_cond <= orig_cond
		end
	catch
		results[:improves_conditioning] = false
	end

	# Test symmetry preservation
	if issymmetric(A)
		try
			result = f(copy(A))
			results[:preserves_symmetry] = result isa AbstractMatrix && issymmetric(result)
		catch
			results[:preserves_symmetry] = false
		end
	end

	# Test positive definiteness preservation
	if issymmetric(A) && isposdef(A)
		try
			result = f(copy(A))
			if result isa AbstractMatrix
				results[:preserves_posdef] = isposdef(result)
			else
				results[:preserves_posdef] = true  # Vector output is considered posdef-preserving
			end
		catch
			results[:preserves_posdef] = false
		end
	end

	# Test sparsity pattern preservation
	if issparse(A)
		try
			result = f(copy(A))
			results[:preserves_sparsity] =
				result isa AbstractMatrix &&
				issparse(result) &&
				count(!iszero, result) ≤ 2 * count(!iszero, A)
		catch
			results[:preserves_sparsity] = false
		end
	end

	return results
end

# Helper functions
function make_diag_dominant_matrix(n::Int, dominance_factor::Real = 2.0)
	A = randn(n, n)
	for i in 1:n
		row_sum = sum(abs, view(A, i, :)) - abs(A[i, i])
		A[i, i] = sign(A[i, i] + eps()) * (dominance_factor * row_sum + 1.0)  # Ensure strong diagonal dominance
	end
	return A
end

function make_ill_conditioned_sparse(n::Int)
	S = spzeros(n, n)

	for i in 1:n
		S[i, i] = 1.0 / (10.0^(i - 1))
	end

	for i in 1:(n - 1)
		S[i, i + 1] = 2.0 * S[i, i]
		S[i + 1, i] = S[i, i + 1]
	end

	for _ in 1:(n ÷ 10)
		i, j = rand(1:n), rand(1:n)
		if i != j
			S[i, j] = rand() * 1e-6
		end
	end

	return S
end

"""
	make_non_diag_dominant_matrix(n::Int)
Creates a matrix that is definitely not diagonally dominant.
"""

function make_non_diag_dominant_matrix(n::Int)
	A = zeros(n, n)
	for i in 1:n
		A[i, i] = 1.0  # Diagonal elements
		for j in 1:n
			if i != j
				A[i, j] = 1.0  # Off-diagonal elements sum to n-1 > 1
			end
		end
	end
	return A
end

function create_spd_matrix(n::Int; condition_number::Real = 10.0)
	Q = qr(randn(n, n)).Q
	λ = range(1.0, condition_number; length = n)
	return Q * Diagonal(λ) * Q'
end

function create_sparse_matrix(n::Int; sparsity::Real = 0.1)
	nnz = round(Int, sparsity * n * n)
	rows = rand(1:n, nnz)
	cols = rand(1:n, nnz)
	vals = randn(nnz)

	# Ensure diagonal entries are nonzero and dominant
	A = sparse(rows, cols, vals, n, n)

	# Add diagonal dominance
	D = spdiagm(0 => vec(sum(abs, A; dims = 2)) .+ 1.0)

	return A + D
end

function create_sparse_matrix(n::Int, actual_sparsity::Float64)
    sparsity = min(max(actual_sparsity, 0.01), 0.99)
    nnz = round(Int, sparsity * n * n)
    rows = rand(1:n, nnz)
    cols = rand(1:n, nnz)
    vals = randn(nnz)

    # Ensure diagonal dominance
    A = sparse(rows, cols, vals, n, n)
    for i in 1:n
        A[i,i] = 2.0 * sum(abs.(A[i,:]))
    end

    return A
end

"""
	test_preconditioner_convergence(A::AbstractMatrix{T},
	b::AbstractVector{T},
	P::Function;
	max_iter::Int = 200,
	tol::Real = 1e-4,
	stagnation_tol::Real = sqrt(eps(T))) where T
Tests the convergence of a preconditioner.
"""

function test_preconditioner_convergence(A::AbstractMatrix{T},
	b::AbstractVector{T},
	P::Function;
	max_iter::Int = 200,
	tol::Real = 1e-4,
	stagnation_tol::Real = sqrt(eps(T))) where T
	n = length(b)
	x = zeros(T, n)
	r = b - A * x
	z = P(r)
	p = copy(z)
	rz_old = dot(r, z)
	init_res = norm(r)

	for i in 1:max_iter
		Ap = A * p
		α = rz_old / dot(p, Ap)
		x .+= α .* p
		r .-= α .* Ap

		# Use relative residual and more relaxed tolerance
		if norm(r) < tol * (init_res + norm(b))
			return true, i
		end

		z = P(r)
		rz_new = dot(r, z)

		# Enhanced stagnation check
		if abs(rz_new - rz_old) < stagnation_tol * abs(rz_old)
			return norm(r) < 10tol * init_res, i
		end

		β = rz_new / rz_old
		p = z + β * p
		rz_old = rz_new
	end

	return false, max_iter
end

# Ensure SPD matrices are actually SPD
function create_spd_matrix(n::Integer; condition_number::Real = 10.0)
	Q = qr(randn(n, n)).Q
	Λ = Diagonal(range(1.0, condition_number; length = n))
	return Symmetric(Q * Λ * Q')
end

# Create diagonally dominant matrix
function make_diag_dominant_matrix(n::Integer, dominance_factor::Real = 2.0)
	A = randn(n, n)
	for i in 1:n
		A[i, i] = dominance_factor * sum(abs.(A[i, :]))
	end
	return A
end

function create_ill_conditioned_sparse_matrix(n::Int)
    A = sprand(n, n, 0.1)
    d = [1.0; [10.0^(-i) for i in 1:(n-1)]]
    return A + spdiagm(0 => d)
end

"""
    create_nearly_singular_matrix(n::Int)
Creates a nearly singular test matrix of size n×n.
"""
function create_nearly_singular_matrix(n::Int)
    Q = qr(randn(n, n)).Q
    Λ = Diagonal(vcat([1e-10], ones(n-1)))  # First eigenvalue near zero
    return Q * Λ * Q'
end
